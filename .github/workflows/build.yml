name: Build Releases

on:
  # Only run for version tags
  push:
    tags: ["v*"]
  # Allow manual triggering from the Actions tab
  workflow_dispatch:

jobs:
  build-linux:
    name: Build Linux Targets
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Add Linux targets
        run: |
          rustup target add x86_64-unknown-linux-musl
          rustup target add aarch64-unknown-linux-musl

      - name: Install Cross
        run: |
          cargo install cross

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build x86_64-unknown-linux-musl with Cross
        run: cross build --release --target x86_64-unknown-linux-musl

      - name: Build aarch64-unknown-linux-musl with Cross
        run: cross build --release --target aarch64-unknown-linux-musl

      - name: Upload aarch64 Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-aarch64
          path: |
            target/aarch64-unknown-linux-musl/release/disco
            target/aarch64-unknown-linux-musl/release/discod
          if-no-files-found: error

      - name: Upload x86_64 Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-x86_64
          path: |
            target/x86_64-unknown-linux-musl/release/disco
            target/x86_64-unknown-linux-musl/release/discod
          if-no-files-found: error

  build-macos:
    name: Build macOS Targets
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Add macOS targets
        run: |
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin

      - name: Install dependencies
        run: |
          brew install protobuf

      - name: Build x86_64-apple-darwin
        run: cargo build --release --target x86_64-apple-darwin

      - name: Build aarch64-apple-darwin
        run: cargo build --release --target aarch64-apple-darwin

      - name: Upload aarch64 macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-aarch64
          path: |
            target/aarch64-apple-darwin/release/disco
            target/aarch64-apple-darwin/release/discod
          if-no-files-found: error

      - name: Upload x86_64 macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-x86_64
          path: |
            target/x86_64-apple-darwin/release/disco
            target/x86_64-apple-darwin/release/discod
          if-no-files-found: error

  # Create a release when tags are pushed
  create-release:
    name: Create Release
    needs: [build-linux, build-macos]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Prepare binaries
        run: |
          mkdir -p releases

          echo "Downloaded artifacts:"
          ls -la

          # Process each artifact directory
          for platform_arch in linux-aarch64 linux-x86_64 macos-aarch64 macos-x86_64; do
            if [ -d "$platform_arch" ]; then
              # Create a directory with the same name as the tar.gz will have
              mkdir -p "disco-$platform_arch"
              
              # Find all executables and copy them to the new directory
              find "$platform_arch" -type f -name "disco*" -exec cp {} "disco-$platform_arch/" \;
              chmod +x "disco-$platform_arch"/disco*
              
              # Create tar.gz archive
              tar -czf "releases/disco-$platform_arch.tar.gz" -C "disco-$platform_arch" .
              
              echo "Created archive for $platform_arch"
            else
              echo "Warning: Directory $platform_arch not found"
            fi
          done

          echo "Created archives:"
          ls -la releases/

      - name: Extract version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          body_path: CHANGELOG.md
          files: releases/*.tar.gz
          draft: false
          prerelease: false
          generate_release_notes: true
